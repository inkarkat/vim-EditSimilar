*EditSimilar.txt*       Commands to edit files with a similar filename. 

			EDIT SIMILAR    by Ingo Karkat
							  *EditSimilar-plugin*
description			|EditSimilar-description|
usage	    			|EditSimilar-usage|
installation   			|EditSimilar-installation|
configuration  			|EditSimilar-configuration|
integration			|EditSimilar-integration|
limitations			|EditSimilar-limitations|
assumptions			|EditSimilar-assumptions|
known problems			|EditSimilar-known-problems|
todo				|EditSimilar-todo|
history				|EditSimilar-history|

==============================================================================
DESCRIPTION					     *EditSimilar-description*

==============================================================================
USAGE							   *EditSimilar-usage*

Substitutions: Change all literal occurrences via text=replacement in the
currently edited file. 
						   *:Esubst* *:EditSubstitute*
:EditSubstitute[!] <text>=<replacement> [<text>=<replacement> [...]]
:Esubst[!] ...
						   *Spsubst* *SplitSubstitute*
:SplitSubstitute[!] <text>=<replacement> [<text>=<replacement> [...]]
:Spsubst[!] ...
					       *:Vspsubst* *:VsplitSubstitute*
:VsplitSubstitute[!] <text>=<replacement> [<text>=<replacement> [...]]
:Vspsubst[!] ...
			Replaces all literal occurrences of <text> in the
			currently edited file with <replacement>, and opens the
			resulting file. If all substitutions can be made on the
			filename, the pathspec is left alone (so you don't get
			any false replacements on a long pathspec). Otherwise,
			the substitutions that weren't applicable to the
			filename are done to the full absolute pathspec. 

			This way, you can substitute an the entire path by
			specifying the same substitution twice: >
			    /etc/test/superapp/test001.cfg
			    :Esubstitute test=prod
			    /etc/test/superapp/prod001.cfg
			    :Esubstitute test=prod test=prod
			    /etc/prod/superapp/prod001.cfg
<			Or perform different substitutions on filename and
			pathspec: >
			    /etc/test/superapp/test001.cfg
			    :Esubstitute test=prod test=production
			    /etc/production/superapp/prod001.cfg
<
			Add [!] to create a new file when the substituted file
			does not exist. 
							     *:FileSubstitute*
:FileSubstitute <text>=<replacement> [<text>=<replacement> [...]] 
							    *:WriteSubstitute*
:WriteSubstitute[!] <text>=<replacement> [<text>=<replacement> [...]] 
							     *:SaveSubstitute*
:SaveSubstitute[!] <text>=<replacement> [<text>=<replacement> [...]] 
			Replaces all literal occurrences of <text> in the
			currently edited file with <replacement>, and sets /
			writes the resulting file. 
			The [!] is needed to overwrite an existing file.


------------------------------------------------------------------------------
Next / Previous: Add an offset to the last number in the currently edited
file. 
				 *:Enext* *:EditNext* *:Eprev* *:EditPrevious*
:[N]EditNext[!] [N]
:[N]Enext[!] [N]
:[N]EditPrevious[!] [N]
:[N]Eprev[!] [N]
			     *:Spnext* *:SplitNext* *:Spprev* *:SplitPrevious*
:[N]SplitNext[!] [N]
:[N]Spnext[!] [N]
:[N]SplitPrevious[!] [N]
:[N]Spprev[!] [N]
			 *:Vspnext* *:VsplitNext* *:Vspprev* *:VsplitPrevious*
:[N]VsplitNext[!] [N]
:[N]Vspnext[!] [N]
:[N]VsplitPrevious[!] [N]
:[N]Vspprev[!] [N]
			Increases the last number found inside the full absolute
			filespec of the currently edited file by [N]. (A fixed
			number width via padding with leading zeros is maintained.) 
			If a file with that number does not exist, the
			substitution is retried with smaller offsets, unless [!]
			is specified. With [!], a new file is created when the
			substituted file does not exist. 
			When jumping to previous numbers, the resulting number
			will never be negative. A jump with [!] and [N] > 1 will
			create a file with number 1, not 0, but you can still
			create number 0 by repeating the command with [N] = 1. 
			Examples: >
			test007.txt in a directory also containing 003-013. 
			:Enext	    -> test008.txt
			:99Enext    -> test013.txt
			:99Enext!   -> test106.txt [New File]
			:99Eprev    -> test003.txt
			:99Eprev!   -> test001.txt [New File]
<
						   *:FilePrevious* *:FileNext*
:[N]FileNext [N]
:[N]FilePrevious [N]
						 *:WritePrevious* *:WriteNext*
:[N]WriteNext[!] [N]
:[N]WritePrevious[!] [N]
						   *:SavePrevious* *:SaveNext*
:[N]SaveNext[!] [N]
:[N]SavePrevious[!] [N]
			Increases the last number found inside the full absolute
			filespec of the currently edited file by [N] and sets /
			writes that file. (A fixed number width via padding with
			leading zeros is maintained.) 
			The [!] is needed to overwrite an existing file.


------------------------------------------------------------------------------
Root: Change the file extension in the currently edited file. 
							  *:Eroot* *:EditRoot*
:EditRoot[!] <extension>
:Eroot[!] ...
							*:Sproot* *:SplitRoot*
:SplitRoot[!] <extension>
:Sproot[!] ...
						      *:Vsproot* *:VsplitRoot*
:VsplitRoot[!] <extension>
:Vsproot[!] ...
			Switches the current file's extension: 
			Edits a file with the current file's path and name, but
			replaces the file extension with the passed one. The
			leading '.' in <extension> is optional; use either
			.txt or txt. To replace (or remove) multiple
			extensions, prepend a . for each one: >
			    myfile.txt.bak
			    :Eroot ..cpp
			    myfile.cpp
			    :Eroot .
			    myfile
<
			Add [!] to create a new file when the substituted file
			does not exist. 

								   *:FileRoot*
:FileRoot <extension>
								  *:WriteRoot*
:WriteRoot[!] <extension>
								   *:SaveRoot*
:SaveRoot[!] <extension>
			Sets / saves a file with the current file's path and
			name, but replaces the file extension with the passed
			one. 
			The [!] is needed to overwrite an existing file.


------------------------------------------------------------------------------
Pattern: Open all files matching it in splits. 
						      *:Sppat* *:SplitPattern*
:SplitPattern <file_pattern>
:Sppat ...
						    *:Vsppat* *:VsplitPattern*
:VsplitPattern <file_pattern>
:Vsppat ...
			Open all files matching <file_pattern> in split windows.
			If one of the files is already open, no second split is
			generated. 


==============================================================================
INSTALLATION					    *EditSimilar-installation*

Put the script into your user or system VIM plugin directory
(e.g. ~/.vim/plugin). 
						    *EditSimilar-dependencies*
- Requires VIM 7.0 or higher. 

==============================================================================
CONFIGURATION					   *EditSimilar-configuration*

==============================================================================
INTEGRATION					     *EditSimilar-integration*

==============================================================================
LIMITATIONS					     *EditSimilar-limitations*

==============================================================================
ASSUMPTIONS					     *EditSimilar-assumptions*

==============================================================================
KNOWN PROBLEMS					  *EditSimilar-known-problems*

==============================================================================
TODO							    *EditSimilar-todo*

==============================================================================
HISTORY							 *EditSimilar-history*

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:

